{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"colormap-tool","text":"<p>A Colormap Tool package to convert cmps between cv and mpl.</p> <ul> <li>Github repository: https://github.com/MeridianInnovation/colormap-tool/</li> <li>Documentation https://MeridianInnovation.github.io/colormap-tool/</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>This package can let users use cv's built-in colormap in matplotlib, or use matplotlib's colormap in cv.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Convert colormaps between matplotlib and OpenCV formats</li> <li>Access colormaps from matplotlib and OpenCVs through a common interface</li> <li>Convert between numpy arrays, matplotlib Colormap objects, and OpenCV constants</li> <li>Register external colormaps with matplotlib</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the project, run the following command:</p> <pre><code>python -m pip install colormap-tool\n</code></pre>"},{"location":"API/api_reference/","title":"API Reference","text":""},{"location":"API/api_reference/#cv-colormaps","title":"Cv Colormaps","text":""},{"location":"API/api_reference/#colormap_tool._cv","title":"<code>colormap_tool._cv</code>","text":"<p>OpenCV colormap utilities.</p> <p>This module provides functions to retrieve colormaps in a format suitable for use with OpenCV. It can return both built-in OpenCV colormaps (as integer constants) and custom colormaps from other sources (as numpy arrays).</p>"},{"location":"API/api_reference/#colormap_tool._cv.apply_colormap_with_numpy","title":"<code>apply_colormap_with_numpy(src, cmp, dst=None)</code>","text":"<p>Apply a colormap to an image using numpy instead of OpenCV.</p> <p>Parameters:</p> Name Type Description Default <code>ndarray</code> <p>The image to apply the colormap to.</p> required <code>ndarray</code> <p>The colormap to apply. Should have shape (256, 1, 3) and dtype uint8.</p> required <code>ndarray</code> <p>The output array to store the result. If None, a new array will be created.</p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>The output array with the colormap applied.</p> Source code in <code>src/colormap_tool/_cv.py</code> <pre><code>def apply_colormap_with_numpy(src: np.ndarray, cmp: np.ndarray, dst: Optional[np.ndarray] = None) -&gt; np.ndarray:\n    \"\"\"\n    Apply a colormap to an image using numpy instead of OpenCV.\n\n    Parameters\n    ----------\n    src : numpy.ndarray\n        The image to apply the colormap to.\n    cmp : numpy.ndarray\n        The colormap to apply. Should have shape (256, 1, 3) and dtype uint8.\n    dst : numpy.ndarray, optional\n        The output array to store the result. If None, a new array will be created.\n\n    Returns\n    -------\n    numpy.ndarray\n        The output array with the colormap applied.\n    \"\"\"\n    if dst is None:\n        dst = np.zeros_like(src)\n    else:\n        if dst.shape != src.shape:\n            raise ValueError(\n                f\"The shape of the output array {dst.shape} does not match the shape of the input array {src.shape}.\"\n            )\n\n    if src.dtype != np.uint8:\n        raise ValueError(f\"The dtype of the input array {src.dtype} is not uint8.\")\n    if cmp.shape != (256, 1, 3):\n        raise ValueError(f\"The shape of the colormap array {cmp.shape} is not (256, 1, 3).\")\n    if cmp.dtype != np.uint8:\n        raise ValueError(f\"The dtype of the colormap array {cmp.dtype} is not uint8.\")\n\n    dst = cmp.copy().squeeze()\n    dst = dst[src]\n\n    return dst\n</code></pre>"},{"location":"API/api_reference/#colormap_tool._cv.apply_colormap_with_numpy(src)","title":"<code>src</code>","text":""},{"location":"API/api_reference/#colormap_tool._cv.apply_colormap_with_numpy(cmp)","title":"<code>cmp</code>","text":""},{"location":"API/api_reference/#colormap_tool._cv.apply_colormap_with_numpy(dst)","title":"<code>dst</code>","text":""},{"location":"API/api_reference/#colormap_tool._cv.get_cv_colormaps","title":"<code>get_cv_colormaps(name, namespace=None, return_arr=False)</code>","text":"<p>Get a BGR colormap in OpenCV format.</p> <p>Note: The returned array is not in RGB format, but in BGR format!</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the colormap. If namespace is None, this should be in the format \"namespace.name\" (e.g., \"cv.VIRIDIS\", \"mpl.viridis\").</p> required <code>Optional[str]</code> <p>The namespace of the colormap (\"cv\", \"mpl\"). If provided, the name parameter should not include the namespace prefix.</p> <code>None</code> <code>bool</code> <p>If True, always returns a numpy array, even for built-in OpenCV colormaps. If False, returns an integer constant for built-in OpenCV colormaps and a numpy array for other colormaps. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>int or ndarray</code> <p>For OpenCV built-in colormaps (namespace=\"cv\"), returns the integer constant that can be passed to cv2.applyColorMap(). For other colormaps, returns a numpy array with shape (256, 1, 3) and dtype uint8 that can be used with cv2.applyColorMap(img, colormap).</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the namespace is not recognized or the colormap name is not found in the namespace.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Get an OpenCV built-in colormap\n&gt;&gt;&gt; cmap = get_cv_colormaps(\"VIRIDIS\", \"cv\")\n&gt;&gt;&gt; # Or equivalently\n&gt;&gt;&gt; cmap = get_cv_colormaps(\"cv.VIRIDIS\")\n&gt;&gt;&gt; colored_img = cv2.applyColorMap(gray_img, cmap)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get a matplotlib colormap for use with OpenCV\n&gt;&gt;&gt; cmap = get_cv_colormaps(\"viridis\", \"mpl\")\n&gt;&gt;&gt; # Or equivalently\n&gt;&gt;&gt; cmap = get_cv_colormaps(\"mpl.viridis\")\n&gt;&gt;&gt; colored_img = cv2.applyColorMap(gray_img, cmap)\n</code></pre> Source code in <code>src/colormap_tool/_cv.py</code> <pre><code>def get_cv_colormaps(name: str, namespace: Optional[str] = None, return_arr: bool = False) -&gt; int | np.ndarray:\n    \"\"\"\n    Get a BGR colormap in OpenCV format.\n\n    Note: The returned array is not in RGB format, but in BGR format!\n\n    Parameters\n    ----------\n    name : str\n        The name of the colormap. If namespace is None, this should be in the format\n        \"namespace.name\" (e.g., \"cv.VIRIDIS\", \"mpl.viridis\").\n    namespace : Optional[str], optional\n        The namespace of the colormap (\"cv\", \"mpl\"). If provided, the name\n        parameter should not include the namespace prefix.\n    return_arr : bool, optional\n        If True, always returns a numpy array, even for built-in OpenCV colormaps.\n        If False, returns an integer constant for built-in OpenCV colormaps and a numpy\n        array for other colormaps.\n        Default is False.\n\n    Returns\n    -------\n    int or numpy.ndarray\n        For OpenCV built-in colormaps (namespace=\"cv\"), returns the integer constant\n        that can be passed to cv2.applyColorMap().\n        For other colormaps, returns a numpy array with shape (256, 1, 3) and dtype uint8\n        that can be used with cv2.applyColorMap(img, colormap).\n\n    Raises\n    ------\n    AssertionError\n        If the namespace is not recognized or the colormap name is not found in the namespace.\n\n    Examples\n    --------\n    &gt;&gt;&gt; # Get an OpenCV built-in colormap\n    &gt;&gt;&gt; cmap = get_cv_colormaps(\"VIRIDIS\", \"cv\")\n    &gt;&gt;&gt; # Or equivalently\n    &gt;&gt;&gt; cmap = get_cv_colormaps(\"cv.VIRIDIS\")\n    &gt;&gt;&gt; colored_img = cv2.applyColorMap(gray_img, cmap)\n\n    &gt;&gt;&gt; # Get a matplotlib colormap for use with OpenCV\n    &gt;&gt;&gt; cmap = get_cv_colormaps(\"viridis\", \"mpl\")\n    &gt;&gt;&gt; # Or equivalently\n    &gt;&gt;&gt; cmap = get_cv_colormaps(\"mpl.viridis\")\n    &gt;&gt;&gt; colored_img = cv2.applyColorMap(gray_img, cmap)\n    \"\"\"\n    try:\n        import cv2\n    except ImportError:\n        cv2 = None\n    if namespace is not None:\n        if \".\" in name:\n            raise ValueError(f\"Namespace {namespace} is provided, so name {name} should not include a dot.\")\n    else:\n        namespace, name = name.split(\".\")\n\n    namespace = namespace.lower()\n    name = name.lower()\n    if namespace not in CMPSPACE:\n        raise ValueError(f\"Namespace {namespace} is not recognized.\")\n    if name not in CMPSPACE[namespace]:\n        raise ValueError(f\"Colormap {name} is not found in namespace {namespace}.\")\n\n    if namespace == \"cv\" and not return_arr and cv2 is not None:\n        return cv2.__dict__[f\"COLORMAP_{name.upper()}\"]\n    else:\n        rgb_arr = CMPSPACE[namespace][name]\n        bgr_arr = rgb_arr[:, :, ::-1]\n        return bgr_arr\n</code></pre>"},{"location":"API/api_reference/#colormap_tool._cv.get_cv_colormaps(name)","title":"<code>name</code>","text":""},{"location":"API/api_reference/#colormap_tool._cv.get_cv_colormaps(namespace)","title":"<code>namespace</code>","text":""},{"location":"API/api_reference/#colormap_tool._cv.get_cv_colormaps(return_arr)","title":"<code>return_arr</code>","text":""},{"location":"API/api_reference/#matplotlib-colormaps","title":"Matplotlib Colormaps","text":""},{"location":"API/api_reference/#colormap_tool._mpl","title":"<code>colormap_tool._mpl</code>","text":"<p>Matplotlib colormap utilities.</p> <p>This module provides functions to retrieve and register colormaps in a format suitable for use with Matplotlib. It can convert colormap arrays from various sources into Matplotlib Colormap objects and register them with the matplotlib.colormaps registry.</p>"},{"location":"API/api_reference/#colormap_tool._mpl.get_mpl_colormaps","title":"<code>get_mpl_colormaps(name, namespace=None)</code>","text":"<p>Get a colormap in Matplotlib format.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the colormap. If namespace is None, this should be in the format \"namespace.name\" (e.g., \"cv.VIRIDIS\", \"mpl.viridis\").</p> required <code>Optional[str]</code> <p>The namespace of the colormap (\"cv\", \"mpl\"). If provided, the name parameter should not include the namespace prefix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Colormap</code> <p>A Matplotlib Colormap object that can be used with matplotlib plotting functions. For matplotlib colormaps (namespace=\"mpl\"), returns the built-in colormap. For other colormaps, converts the numpy array to a Matplotlib ListedColormap.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the namespace is not recognized or the colormap name is not found in the namespace.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Get a matplotlib built-in colormap\n&gt;&gt;&gt; cmap = get_mpl_colormaps(\"viridis\", \"mpl\")\n&gt;&gt;&gt; # Or equivalently\n&gt;&gt;&gt; cmap = get_mpl_colormaps(\"mpl.viridis\")\n&gt;&gt;&gt; plt.imshow(data, cmap=cmap)\n</code></pre> <pre><code>&gt;&gt;&gt; # Get an OpenCV colormap for use with matplotlib\n&gt;&gt;&gt; cmap = get_mpl_colormaps(\"VIRIDIS\", \"cv\")\n&gt;&gt;&gt; # Or equivalently\n&gt;&gt;&gt; cmap = get_mpl_colormaps(\"cv.VIRIDIS\")\n&gt;&gt;&gt; plt.imshow(data, cmap=cmap)\n</code></pre> Source code in <code>src/colormap_tool/_mpl.py</code> <pre><code>def get_mpl_colormaps(name: str, namespace: Optional[str] = None) -&gt; \"Colormap\":\n    \"\"\"\n    Get a colormap in Matplotlib format.\n\n    Parameters\n    ----------\n    name : str\n        The name of the colormap. If namespace is None, this should be in the format\n        \"namespace.name\" (e.g., \"cv.VIRIDIS\", \"mpl.viridis\").\n    namespace : Optional[str], optional\n        The namespace of the colormap (\"cv\", \"mpl\"). If provided, the name\n        parameter should not include the namespace prefix.\n\n    Returns\n    -------\n    matplotlib.colors.Colormap\n        A Matplotlib Colormap object that can be used with matplotlib plotting functions.\n        For matplotlib colormaps (namespace=\"mpl\"), returns the built-in colormap.\n        For other colormaps, converts the numpy array to a Matplotlib ListedColormap.\n\n    Raises\n    ------\n    AssertionError\n        If the namespace is not recognized or the colormap name is not found in the namespace.\n\n    Examples\n    --------\n    &gt;&gt;&gt; # Get a matplotlib built-in colormap\n    &gt;&gt;&gt; cmap = get_mpl_colormaps(\"viridis\", \"mpl\")\n    &gt;&gt;&gt; # Or equivalently\n    &gt;&gt;&gt; cmap = get_mpl_colormaps(\"mpl.viridis\")\n    &gt;&gt;&gt; plt.imshow(data, cmap=cmap)\n\n    &gt;&gt;&gt; # Get an OpenCV colormap for use with matplotlib\n    &gt;&gt;&gt; cmap = get_mpl_colormaps(\"VIRIDIS\", \"cv\")\n    &gt;&gt;&gt; # Or equivalently\n    &gt;&gt;&gt; cmap = get_mpl_colormaps(\"cv.VIRIDIS\")\n    &gt;&gt;&gt; plt.imshow(data, cmap=cmap)\n    \"\"\"\n    try:\n        import matplotlib as mpl\n    except ImportError as err:\n        raise ImportError(\"Missing optional dependency: matplotlib\", name=\"matplotlib\") from err\n    if namespace is not None:\n        if \".\" in name:\n            raise ValueError(f\"Namespace {namespace} is provided, so name {name} should not include a dot.\")\n    else:\n        namespace, name = name.split(\".\")\n\n    namespace = namespace.lower()\n    name = name.lower()\n    if namespace not in CMPSPACE:\n        raise ValueError(f\"Namespace {namespace} is not recognized.\")\n    if name not in CMPSPACE[namespace]:\n        raise ValueError(f\"Colormap {name} is not found in namespace {namespace}.\")\n\n    if namespace == \"mpl\":\n        return mpl.colormaps[name]\n    else:\n        if name not in _cached_colormaps[namespace]:\n            _cached_colormaps[namespace][name] = uint8_rgb_arr2mpl_cmp(\n                CMPSPACE[namespace][name], \".\".join([namespace, name]), alpha=1.0, mode=\"listed\"\n            )\n        return _cached_colormaps[namespace][name]\n</code></pre>"},{"location":"API/api_reference/#colormap_tool._mpl.get_mpl_colormaps(name)","title":"<code>name</code>","text":""},{"location":"API/api_reference/#colormap_tool._mpl.get_mpl_colormaps(namespace)","title":"<code>namespace</code>","text":""},{"location":"API/api_reference/#colormap_tool._mpl.register_all_cmps2mpl","title":"<code>register_all_cmps2mpl()</code>","text":"<p>Register all available colormaps with the matplotlib.colormaps registry.</p> <p>This function iterates through all namespaces and colormap names in CMPSPACE and registers each colormap with matplotlib. After calling this function, all colormaps can be accessed directly through matplotlib.colormaps.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; register_all_cmps2mpl()\n&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; plt.imshow(data, cmap=\"cv.VIRIDIS\")\n</code></pre> Source code in <code>src/colormap_tool/_mpl.py</code> <pre><code>def register_all_cmps2mpl() -&gt; None:\n    \"\"\"\n    Register all available colormaps with the matplotlib.colormaps registry.\n\n    This function iterates through all namespaces and colormap names in CMPSPACE\n    and registers each colormap with matplotlib. After calling this function,\n    all colormaps can be accessed directly through matplotlib.colormaps.\n\n    Examples\n    --------\n    &gt;&gt;&gt; register_all_cmps2mpl()\n    &gt;&gt;&gt; import matplotlib.pyplot as plt\n    &gt;&gt;&gt; plt.imshow(data, cmap=\"cv.VIRIDIS\")\n    \"\"\"\n    try:\n        import matplotlib as mpl\n    except ImportError as err:\n        raise ImportError(\"Missing optional dependency: matplotlib\", name=\"matplotlib\") from err\n    global _is_registered\n    if _is_registered:\n        return\n    for namespace in CMPSPACE:\n        if namespace == \"mpl\":\n            continue\n        for name in CMPSPACE[namespace]:\n            cmp = get_mpl_colormaps(name, namespace)\n            mpl.colormaps.register(cmp)\n    _is_registered = True\n</code></pre>"},{"location":"API/api_reference/#colormap_tool._mpl.uint8_rgb_arr2mpl_cmp","title":"<code>uint8_rgb_arr2mpl_cmp(arr, name, alpha=1.0, mode='listed')</code>","text":"<p>Convert a uint8 RGB array to a Matplotlib Colormap object.</p> <p>Parameters:</p> Name Type Description Default <code>ndarray</code> <p>A numpy array of RGB values with shape (N, 3) or (N, 1, 3) and dtype uint8. Values should be in the range [0, 255].</p> required <code>str</code> <p>The name to give to the colormap.</p> required <code>float</code> <p>The alpha (opacity) value for the colormap, by default 1.0 (fully opaque).</p> <code>1.0</code> <code>(listed, linear)</code> <p>The type of colormap to create: - \"listed\": Creates a ListedColormap (discrete colors) - \"linear\": Creates a LinearSegmentedColormap (interpolated colors) Default is \"listed\".</p> <code>\"listed\"</code> <p>Returns:</p> Type Description <code>Colormap</code> <p>A Matplotlib Colormap object (either ListedColormap or LinearSegmentedColormap depending on the mode parameter).</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the input array has an invalid shape or dtype.</p> <code>ValueError</code> <p>If the mode parameter is not \"listed\" or \"linear\".</p> Notes <p>The function converts the uint8 values [0-255] to float values [0-1] required by Matplotlib.</p> Source code in <code>src/colormap_tool/_mpl.py</code> <pre><code>def uint8_rgb_arr2mpl_cmp(\n    arr: np.ndarray, name: str, alpha: float = 1.0, mode: Literal[\"listed\", \"linear\"] = \"listed\"\n) -&gt; \"Colormap\":\n    \"\"\"\n    Convert a uint8 RGB array to a Matplotlib Colormap object.\n\n    Parameters\n    ----------\n    arr : numpy.ndarray\n        A numpy array of RGB values with shape (N, 3) or (N, 1, 3) and dtype uint8.\n        Values should be in the range [0, 255].\n    name : str\n        The name to give to the colormap.\n    alpha : float, optional\n        The alpha (opacity) value for the colormap, by default 1.0 (fully opaque).\n    mode : {\"listed\", \"linear\"}, optional\n        The type of colormap to create:\n        - \"listed\": Creates a ListedColormap (discrete colors)\n        - \"linear\": Creates a LinearSegmentedColormap (interpolated colors)\n        Default is \"listed\".\n\n    Returns\n    -------\n    matplotlib.colors.Colormap\n        A Matplotlib Colormap object (either ListedColormap or LinearSegmentedColormap\n        depending on the mode parameter).\n\n    Raises\n    ------\n    AssertionError\n        If the input array has an invalid shape or dtype.\n    ValueError\n        If the mode parameter is not \"listed\" or \"linear\".\n\n    Notes\n    -----\n    The function converts the uint8 values [0-255] to float values [0-1] required by Matplotlib.\n    \"\"\"\n    try:\n        from matplotlib.colors import LinearSegmentedColormap, ListedColormap\n    except ImportError as err:\n        raise ImportError(\"Missing optional dependency: matplotlib\", name=\"matplotlib\") from err\n    if arr.ndim == 2 and arr.shape[1] != 3:\n        raise ValueError(f\"The shape of the input array {arr.shape} is not (N, 3).\")\n    if arr.ndim == 3:\n        if arr.shape[1] != 1:\n            raise ValueError(f\"The shape of the input array {arr.shape} is not (N, 1, 3).\")\n        if arr.shape[2] != 3:\n            raise ValueError(f\"The shape of the input array {arr.shape} is not (N, 1, 3).\")\n        arr = arr.squeeze(1)\n\n    if arr.dtype != np.uint8:\n        raise ValueError(f\"The dtype of the input array {arr.dtype} is not uint8.\")\n\n    # convert [0-255] uint8 to [0-1] float\n    arr = arr.astype(np.float64) / 255.0\n\n    alpha = np.full((arr.shape[0], 1), alpha)\n\n    arr = np.concatenate((arr, alpha), axis=1)\n\n    if mode == \"listed\":\n        return ListedColormap(arr, name=name)\n    elif mode == \"linear\":\n        return LinearSegmentedColormap.from_list(name, arr)\n    else:\n        raise ValueError(\"mode must be 'listed' or 'linear'\")\n</code></pre>"},{"location":"API/api_reference/#colormap_tool._mpl.uint8_rgb_arr2mpl_cmp(arr)","title":"<code>arr</code>","text":""},{"location":"API/api_reference/#colormap_tool._mpl.uint8_rgb_arr2mpl_cmp(name)","title":"<code>name</code>","text":""},{"location":"API/api_reference/#colormap_tool._mpl.uint8_rgb_arr2mpl_cmp(alpha)","title":"<code>alpha</code>","text":""},{"location":"API/api_reference/#colormap_tool._mpl.uint8_rgb_arr2mpl_cmp(mode)","title":"<code>mode</code>","text":""},{"location":"home/changelog/","title":"Changelog","text":""},{"location":"home/changelog/#v020-2025-05-12","title":"v0.2.0 (2025-05-12)","text":""},{"location":"home/changelog/#feat","title":"Feat","text":"<ul> <li>Implement the basic function of colormap_tool</li> <li>Add scripts to extract and save various colormaps from OpenCV and Matplotlib</li> </ul>"},{"location":"home/license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Meridian Innovation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"home/usage/","title":"Usage","text":""},{"location":"home/usage/#basic-import","title":"Basic Import","text":"<pre><code>import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport colormap_tools\n</code></pre>"},{"location":"home/usage/#available-colormap-namespaces","title":"Available Colormap Namespaces","text":"<p>The package provides colormaps from three sources:</p> <ul> <li><code>cv</code>: OpenCV built-in colormaps (e.g., <code>viridis</code>, <code>plasma</code>, <code>jet</code>)</li> <li><code>mpl</code>: Matplotlib built-in colormaps (e.g., <code>viridis</code>, <code>plasma</code>, <code>jet</code>)</li> </ul>"},{"location":"home/usage/#accessing-colormaps","title":"Accessing Colormaps","text":"<p>There are two ways to specify which colormap you want:</p> <ol> <li>Using separate namespace and name parameters:</li> </ol> <pre><code># Get a matplotlib colormap\ncmap = colormap_tools.get_cv_colormaps(\"viridis\", \"mpl\")\n# Get an OpenCV colormap\ncmap = colormap_tools.get_mpl_colormaps(\"viridis\", \"cv\")\n</code></pre> <ol> <li>Using dot notation in a single parameter:</li> </ol> <pre><code># Get a matplotlib colormap\ncmap = colormap_tools.get_cv_colormaps(\"mpl.viridis\")\n# Get an OpenCV colormap\ncmap = colormap_tools.get_mpl_colormaps(\"cv.viridis\")\n</code></pre>"},{"location":"home/usage/#using-colormaps-with-opencv","title":"Using Colormaps with OpenCV","text":"<pre><code># Get a matplotlib colormap for use with OpenCV\n# Note: This method returns a BGR format colormap!\ncmap = colormap_tools.get_cv_colormaps(\"viridis\", \"mpl\")\n\n# Create a sample grayscale image\ngray_img = np.random.randint(0, 255, (100, 100), dtype=np.uint8)\n\n# Apply the colormap\ncolored_img = cv2.applyColorMap(gray_img, cmap)\n\n# Display the image (note: OpenCV uses BGR format)\ncolored_img_rgb = cv2.cvtColor(colored_img, cv2.COLOR_BGR2RGB)  # Convert to RGB for display\ncv2.imshow(\"Colored Image\", colored_img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n</code></pre>"},{"location":"home/usage/#using-colormaps-with-matplotlib","title":"Using Colormaps with Matplotlib","text":"<pre><code># Get an OpenCV colormap for use with matplotlib\ncmap = colormap_tools.get_mpl_colormaps(\"viridis\", \"cv\")\n\nfrom matplotlib.colors import Colormap\nassert isinstance(cmap, Colormap)\n\n# Create a sample grayscale image\ngray_img = np.random.randint(0, 255, (100, 100), dtype=np.uint8)\n\n# Display the image with the colormap\nplt.figure(figsize=(6, 6))\nplt.imshow(gray_img, cmap=cmap)\nplt.colorbar(label=\"Value\")\nplt.title(\"Image with OpenCV VIRIDIS colormap\")\nplt.show()\n</code></pre>"},{"location":"home/usage/#registering-colormaps-with-matplotlib","title":"Registering Colormaps with Matplotlib","text":"<p>You can register all colormaps with matplotlib for direct access by name:</p> <pre><code># Register all colormaps with matplotlib\ncolormap_tools.register_all_cmps2mpl()\n\n# Now you can use any colormap directly with matplotlib by name\nplt.figure(figsize=(12, 4))\n\n# Create a sample data array\ndata = np.random.rand(20, 20)\n\n# Plot with different colormaps\nplt.subplot(121)\nplt.imshow(data, cmap=\"cv.jet\") # do not use cv.JET\nplt.title(\"OpenCV JET\")\nplt.colorbar()\n\nplt.subplot(122)\nplt.imshow(data, cmap=\"viridis\") # do not use mpl.viridis\nplt.title(\"Matplotlib Viridis\")\nplt.colorbar()\n\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"home/usage/#converting-rgb-arrays-to-matplotlib-colormaps","title":"Converting RGB Arrays to Matplotlib Colormaps","text":"<p>If you have your own RGB colormap data, you can convert it to a matplotlib colormap:</p> <pre><code># Create a custom RGB array (256\u00d73 uint8 values)\nrgb_data = np.zeros((256, 3), dtype=np.uint8)\n# Fill with a gradient from blue to red\nrgb_data[:, 0] = np.linspace(0, 255, 256)  # Red channel\nrgb_data[:, 2] = np.linspace(255, 0, 256)  # Blue channel\n\n# Convert to a matplotlib colormap\ncustom_cmap = colormap_tools.uint8_rgb_arr2mpl_cmp(\n    rgb_data,\n    name=\"custom_blue_red\",\n    alpha=1.0,\n    mode=\"linear\"\n)\n\n# Use the custom colormap\nplt.figure(figsize=(6, 6))\nplt.imshow(data, cmap=custom_cmap)\nplt.colorbar(label=\"Value\")\nplt.title(\"Custom Blue-Red Colormap\")\nplt.show()\n</code></pre>"}]}